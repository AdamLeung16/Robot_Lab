#!/usr/bin/env python

import heapq
import yaml
import rospy
import roslaunch
import tf
from geometry_msgs.msg import PoseStamped

startx,starty = 4,4
endx,endy = 1,12


class Node:
    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position

        self.g = 0
        self.h = 0
        self.f = 0

    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):
        return self.f < other.f

def astar(map, start, end):
    # 定义四个方向的移动
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]

    # 创建起始节点和结束节点
    start_node = Node(None, start)
    start_node.g = start_node.h = start_node.f = 0
    end_node = Node(None, end)
    end_node.g = end_node.h = end_node.f = 0

    # 初始化开启列表和关闭列表
    open_list = []
    closed_list = []

    # 将起始节点加入开启列表
    heapq.heappush(open_list, (start_node.f, start_node))

    # 循环直到开启列表为空
    while open_list:
        # 取出当前节点
        current_node = heapq.heappop(open_list)[1]

        # 如果当前节点是目标节点，返回路径
        if current_node == end_node:
            path = []
            while current_node is not None:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # 反转路径，以得到从起点到终点的顺序

        # 将当前节点加入关闭列表
        closed_list.append(current_node)

        # 遍历当前节点的邻居
        for direction in directions:
            # 计算邻居节点的坐标
            neighbor_position = (current_node.position[0] + direction[0], current_node.position[1] + direction[1])

            # 确保邻居节点在迷宫内，并且不是障碍物
            if neighbor_position[0] < 0 or neighbor_position[0] >= len(map) or neighbor_position[1] < 0 or\
                    neighbor_position[1] >= len(map[0]) or map[neighbor_position[0]][neighbor_position[1]] == 100\
                    or map[neighbor_position[0]][neighbor_position[1]] == -1:
                continue

            # 创建邻居节点
            neighbor_node = Node(current_node, neighbor_position)

            # 如果邻居节点已经在关闭列表中，跳过
            if neighbor_node in closed_list:
                continue

            # 计算邻居节点的 g, h, f 值
            neighbor_node.g = current_node.g + 1
            neighbor_node.h = abs(neighbor_node.position[0] - end_node.position[0]) + abs(neighbor_node.position[1] - end_node.position[1])
            neighbor_node.f = neighbor_node.g + neighbor_node.h

            # 如果邻居节点已经在开启列表中，并且新的 g 值更高，跳过
            for _, open_node in open_list:
                if neighbor_node == open_node and neighbor_node.g > open_node.g:
                    continue

            # 将邻居节点加入开启列表
            heapq.heappush(open_list, (neighbor_node.f, neighbor_node))

    # 如果开启列表为空且未找到路径，返回空列表
    return []

def read_map(file_path):
    map = []
    with open(file_path, 'r') as file:
        for line in file:
            row = [int(x) for x in line.split()]
            map.append(row)
    return map

def save_yaml(coordinates, save_path):

    # 构建ROS地图文件格式的数据结构
    map_data = {
        'header': {
            'seq': 1,
            'stamp': {'secs': 0, 'nsecs': 0},
            'frame_id': "map"
        },
        'poses': []
    }

    # 添加每个姿态到地图数据结构中
    for i, coord in enumerate(coordinates):
        pose = {
            'header': {
                'seq': i,
                'stamp': {'secs': 0, 'nsecs': 0},
                'frame_id': "map"
            },
            'pose': {
                'position': {'x': (coord[1]-4), 'y': -(coord[0]-4), 'z': 0.0},
                'orientation': {'x': 0.0, 'y': 0.0, 'z': 0.0, 'w': 1.0}
            }
        }
        map_data['poses'].append(pose)

    # 将数据序列化为YAML格式
    ros_map_yaml = yaml.dump(map_data, default_flow_style=False)
    with open(save_path, 'a') as yaml_file:
        yaml_file.write(ros_map_yaml)

def get_start():
    global startx
    global starty
    listener = tf.TransformListener() #开始监听tf
    while not rospy.is_shutdown():
        try:
            (trans,rot) = listener.lookupTransform('map', 'base_link', rospy.Time(0)) #获取'base_link'相对于'map'的坐标变换，返回两个列表
            # print('position',trans)
            startx = (int)(-(round(trans[1])-4))
            starty = (int)(round(trans[0])+4)
            break
        except:
            continue

def nav_goal_callback(data):
    global endx
    global endy
    endx = (int)(-(round(data.pose.position.y)-4))
    endy = (int)(round(data.pose.position.x)+4)

def get_end():
    rospy.Subscriber("/move_base_simple/goal", PoseStamped, nav_goal_callback)

def run_path():
    # 创建一个Roslaunch对象
    uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
    roslaunch.configure_logging(uuid)
    # 定义launch文件的路径
    launch_file = "/home/adam/catkin_ws/src/differential_4-wheeled_car/launch/autocar_run.test"
    # 创建一个节点
    launch = roslaunch.parent.ROSLaunchParent(uuid, [launch_file])
    # 启动节点
    launch.start()
    # 等待节点终止
    rospy.loginfo("Node is running...")
    # launch.spin()
    # # 停止节点
    # launch.shutdown()

def main():
    start = (startx,starty)
    end = (endx,endy)
    while(True):
        rospy.init_node('my_piont_listener',anonymous=True)
        get_start()
        get_end()
        start = (startx,starty)
        oldend = end
        end = (endx,endy)

        # 使用A*算法求解路径
        if(oldend!=end):
            print(startx,starty,endx,endy)            
            # 从文件中读取迷宫数据
            map = read_map("/home/adam/catkin_ws/src/differential_4-wheeled_car/map/map_tiny.txt")
            path = astar(map, start, end)
            print(path)
            save_yaml(path, '/home/adam/catkin_ws/src/differential_4-wheeled_car/trajectories/path.yaml')
            run_path()

if __name__ == "__main__":
    main()